name: üéØ Promo Monitor - SP ‚Üí Recife

on:
  schedule:
    # Executar 3x por dia (8h, 14h, 20h) nos dias √∫teis
    - cron: '0 11,17,23 * * 1-5'  # UTC times
  workflow_dispatch:  # Permitir execu√ß√£o manual
    inputs:
      departure_date:
        description: 'Data de partida (YYYY-MM-DD)'
        required: false
        default: ''
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write  # Para commit do seen.json
  issues: write    # Para criar issues de notifica√ß√£o

jobs:
  check-prices:
    runs-on: ubuntu-latest
    environment: APIKEYS
    outputs:
      price_info: ${{ steps.price_check.outputs.price_info }}
      analysis_data: ${{ steps.upload_analysis.outputs.analysis_data }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: üîç Check flight prices (APIs)
      id: price_check
      env:
        AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
        AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
        OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}
        OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}
      run: |
        cd app
        
        # Executar an√°lise de pre√ßos
        echo "üîç Analisando pre√ßos SP ‚Üí Recife..."
        python flight_price_apis.py > price_analysis.log 2>&1
        
        # Capturar resultado da an√°lise
        if [ -f "flight_analysis.json" ]; then
          PRICE_INFO=$(python -c "
          import json
          try:
              with open('flight_analysis.json') as f:
                  data = json.load(f)
                  if 'error' not in data:
                      summary = data['summary']
                      price = summary['cheapest_price_brl']
                      rating = summary['price_rating']
                      airline = summary['airline']
                      origin = summary['best_origin']
                      print(f'{price}|{rating}|{airline}|{origin}')
                  else:
                      print('ERROR|ERROR|ERROR|ERROR')
              except:
                  print('ERROR|ERROR|ERROR|ERROR')
          ")
          
          echo "price_info=$PRICE_INFO" >> $GITHUB_OUTPUT
          echo "‚úÖ An√°lise de pre√ßos conclu√≠da"
        else
          echo "price_info=ERROR|ERROR|ERROR|ERROR" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Arquivo de an√°lise n√£o encontrado"
        fi
        
    - name: üì§ Upload analysis data
      id: upload_analysis
      run: |
        cd app
        if [ -f "flight_analysis.json" ]; then
          # Criar artifact com dados da an√°lise
          echo "analysis_data=$(cat flight_analysis.json | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "‚úÖ Dados de an√°lise preparados"
        else
          echo "analysis_data=" >> $GITHUB_OUTPUT
        fi

  monitor-rss-and-notify:
    runs-on: ubuntu-latest
    environment: TELEGRAM
    needs: check-prices
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: üì¶ Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: üìä Restore price analysis
      run: |
        cd app
        if [ -n "${{ needs.check-prices.outputs.analysis_data }}" ]; then
          echo "${{ needs.check-prices.outputs.analysis_data }}" | base64 -d > flight_analysis.json
          echo "‚úÖ Dados de an√°lise de pre√ßos restaurados"
        else
          echo "‚ö†Ô∏è Nenhum dado de an√°lise de pre√ßos dispon√≠vel"
        fi
        
    - name: üìä Monitor RSS feeds
      id: monitor
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        
        echo "üì° Monitorando feeds RSS..."
        python main.py > rss_monitor.log 2>&1
        
        echo "‚úÖ Monitoramento RSS conclu√≠do"
        
    - name: üì± Send smart notifications
      if: success()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        
        echo "üîç Verificando dados para notifica√ß√£o..."
        
        # Verificar credenciais Telegram
        if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
          echo "‚ùå Credenciais Telegram n√£o configuradas"
          echo "BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:+configurado}"
          echo "CHAT_ID: ${TELEGRAM_CHAT_ID:+configurado}"
          exit 0
        fi
        
        # Verificar se existe an√°lise de pre√ßos
        if [ -f "flight_analysis.json" ]; then
          echo "‚úÖ Arquivo de an√°lise encontrado"
          PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
          echo "üìä Dados de pre√ßo: $PRICE_DATA"
          
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          echo "üí∞ Pre√ßo: R$ $PRICE_VALUE"
          echo "üìä Rating: $PRICE_RATING"
          echo "‚úàÔ∏è Companhia: $AIRLINE"
          echo "üè¢ Origem: $ORIGIN"
          
          # SEMPRE enviar notifica√ß√£o para debug (tempor√°rio)
          SHOULD_NOTIFY=true
          echo "üì± Enviando notifica√ß√£o (modo debug)"
          
          # Sempre enviar notifica√ß√£o para debug - vamos ver o que est√° acontecendo
          echo "üöÄ Preparando notifica√ß√£o Telegram..."
          
          # Enviar notifica√ß√£o
          if [ "$SHOULD_NOTIFY" = "true" ]; then
            python -c "
            import requests
            import json
            import os
            from datetime import datetime
            
            print('üîç Iniciando envio de notifica√ß√£o...')
            
            bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
            chat_id = os.environ.get('TELEGRAM_CHAT_ID')
            
            print(f'BOT_TOKEN presente: {bool(bot_token)}')
            print(f'CHAT_ID presente: {bool(chat_id)}')
            
            if not bot_token or not chat_id:
                print('‚ùå Credenciais Telegram n√£o encontradas')
                exit(1)
            
            # Teste simples primeiro
            message = f'''üß™ **TESTE - Monitoramento SP ‚Üí Recife**
            
‚è∞ Executado em: {datetime.now().strftime('%H:%M - %d/%m/%Y')}
ü§ñ Via GitHub Actions
üì± Environment: TELEGRAM
            
Este √© um teste para verificar se as notifica√ß√µes est√£o funcionando.'''
            
            url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            print(f'üöÄ Enviando para: {url}')
            print(f'üì® Chat ID: {chat_id}')
            
            try:
                response = requests.post(url, json=payload, timeout=10)
                print(f'üì° Status Code: {response.status_code}')
                print(f'üìÑ Response: {response.text}')
                
                if response.status_code == 200:
                    print('‚úÖ Notifica√ß√£o Telegram enviada com sucesso!')
                else:
                    print(f'‚ùå Erro Telegram: {response.status_code} - {response.text}')
            except Exception as e:
                print(f'‚ùå Erro na requisi√ß√£o: {e}')
            "
          else
            echo "‚ÑπÔ∏è Nenhuma notifica√ß√£o necess√°ria (pre√ßo: $PRICE_RATING)"
          fi
        else
          echo "‚ö†Ô∏è An√°lise de pre√ßos n√£o dispon√≠vel - enviando notifica√ß√£o de teste mesmo assim"
          
          # Enviar notifica√ß√£o de teste mesmo sem dados de pre√ßos
          python -c "
          import requests
          import os
          from datetime import datetime
          
          print('üîç Teste sem an√°lise de pre√ßos...')
          
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if bot_token and chat_id:
              message = f'''üß™ **TESTE - Workflow Executado**
              
‚ö†Ô∏è An√°lise de pre√ßos n√£o dispon√≠vel
‚è∞ Executado em: {datetime.now().strftime('%H:%M - %d/%m/%Y')}
ü§ñ Via GitHub Actions
üì± Environment: TELEGRAM

Sistema funcionando, mas sem dados de APIs.'''
              
              url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
              payload = {
                  'chat_id': chat_id,
                  'text': message,
                  'parse_mode': 'Markdown'
              }
              
              try:
                  response = requests.post(url, json=payload, timeout=10)
                  if response.status_code == 200:
                      print('‚úÖ Notifica√ß√£o de teste enviada!')
                  else:
                      print(f'‚ùå Erro: {response.status_code} - {response.text}')
              except Exception as e:
                  print(f'‚ùå Erro na requisi√ß√£o: {e}')
          else:
              print('‚ùå Credenciais Telegram n√£o configuradas no environment TELEGRAM')
          "
        fi
        
    - name: üíæ Save data and commit changes
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Criar diret√≥rio de dados se n√£o existir
        mkdir -p data/price_history
        
        # Salvar hist√≥rico de pre√ßos
        cd app
        DATE=$(date +%Y-%m-%d_%H)
        if [ -f "flight_analysis.json" ]; then
          cp flight_analysis.json "../data/price_history/sp_recife_${DATE}.json"
          echo "üíæ Hist√≥rico salvo: sp_recife_${DATE}.json"
        fi
        
        cd ..
        
        # Adicionar arquivos de dados
        git add data/ || true
        
        # Commit apenas se houver mudan√ßas
        if ! git diff --staged --quiet; then
          git commit -m "ü§ñ Update monitoring data - $(date '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "‚úÖ Dados atualizados no reposit√≥rio"
        else
          echo "‚ÑπÔ∏è Nenhuma mudan√ßa nos dados"
        fi
        
    - name: üßπ Cleanup old data
      run: |
        # Manter apenas √∫ltimos 30 dias de hist√≥rico
        find data/price_history/ -name "sp_recife_*.json" -mtime +30 -delete 2>/dev/null || true
        echo "‚úÖ Limpeza de dados antigos conclu√≠da"
        
    - name: üìä Execution summary
      if: always()
      run: |
        cd app
        
        echo "## üìä Resumo da Execu√ß√£o" >> $GITHUB_STEP_SUMMARY
        echo "- üïê Hor√°rio: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- üéØ Rota: S√£o Paulo ‚Üí Recife" >> $GITHUB_STEP_SUMMARY
        
        # Dados de pre√ßos
        PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
        if [ "$PRICE_DATA" != "ERROR|ERROR|ERROR|ERROR" ]; then
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          echo "- üí∞ Pre√ßo mais barato: R\$ $PRICE_VALUE ($PRICE_RATING)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úàÔ∏è Melhor op√ß√£o: $AIRLINE via $ORIGIN" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ö†Ô∏è Dados de pre√ßos: N√£o dispon√≠veis" >> $GITHUB_STEP_SUMMARY
        fi
        
        # APIs utilizadas
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß APIs Consultadas:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Amadeus Self-Service (pre√ßos)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ OpenSky Network (tr√°fego a√©reo)" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ RSS Feeds (promo√ß√µes)" >> $GITHUB_STEP_SUMMARY
        
        # Feeds monitorados
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì° Feeds RSS Monitorados:" >> $GITHUB_STEP_SUMMARY
        echo "- Passageiro de Primeira" >> $GITHUB_STEP_SUMMARY
        echo "- MaxMilhas Blog" >> $GITHUB_STEP_SUMMARY
        echo "- Viagem na Viagem" >> $GITHUB_STEP_SUMMARY
        echo "- Qual Viagem" >> $GITHUB_STEP_SUMMARY
        echo "- Vida de Turista" >> $GITHUB_STEP_SUMMARY
        echo "- Melhores Destinos" >> $GITHUB_STEP_SUMMARY
