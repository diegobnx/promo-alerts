name: "Promo Monitor - SP → Recife"

on:
  schedule:
    - cron: '0 11,17,23 * * 1-5'
  workflow_dispatch:
    inputs:
      departure_date:
        description: 'Data de partida (YYYY-MM-DD)'
        required: false
        default: ''
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  issues: write

jobs:
  check-prices:
    runs-on: ubuntu-latest
    environment: APIKEYS
    outputs:
      price_info: ${{ steps.price_check.outputs.price_info }}
      analysis_data: ${{ steps.upload_analysis.outputs.analysis_data }}
    
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "Install dependencies"
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: "Check SP → Recife prices"
      id: price_check
      env:
        AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
        AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
        OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}
        OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}
      run: |
        cd app
        echo "Analisando preços SP → Recife..."
        python flight_price_apis.py > price_analysis.log 2>&1
        
        if [ -f "flight_analysis.json" ]; then
          PRICE_INFO=$(python -c "import json; data=json.load(open('flight_analysis.json')); s=data['summary']; print(f\"{s['cheapest_price_brl']}|{s['price_rating']}|{s['airline']}|{s['best_origin']}\")" 2>/dev/null || echo "ERROR|ERROR|ERROR|ERROR")
          echo "price_info=$PRICE_INFO" >> $GITHUB_OUTPUT
          echo "Análise de preços concluída"
        else
          echo "price_info=ERROR|ERROR|ERROR|ERROR" >> $GITHUB_OUTPUT
          echo "Arquivo de análise não encontrado"
        fi
        
    - name: "Upload analysis data"
      id: upload_analysis
      run: |
        cd app
        if [ -f "flight_analysis.json" ]; then
          echo "analysis_data=$(cat flight_analysis.json | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "Dados de análise preparados"
        else
          echo "analysis_data=" >> $GITHUB_OUTPUT
        fi

  monitor-rss-and-notify:
    runs-on: ubuntu-latest
    environment: TELEGRAM
    needs: check-prices
    
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "Install dependencies"
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: "Restore price analysis"
      run: |
        cd app
        if [ -n "${{ needs.check-prices.outputs.analysis_data }}" ]; then
          echo "${{ needs.check-prices.outputs.analysis_data }}" | base64 -d > flight_analysis.json
          echo "Dados de análise de preços restaurados"
        else
          echo "Nenhum dado de análise de preços disponível"
        fi
        
    - name: "Monitor RSS feeds"
      id: monitor
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        echo "Monitorando feeds RSS..."
        python main.py > rss_monitor.log 2>&1
        echo "Monitoramento RSS concluído"
        
    - name: "Send Telegram notification"
      if: success()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        
        echo "Verificando dados para notificação..."
        
        if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
          echo "Credenciais Telegram não configuradas"
          exit 0
        fi
        
        echo "Credenciais Telegram encontradas"
        
        if [ -f "flight_analysis.json" ]; then
          echo "Arquivo de análise encontrado"
          PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
          echo "Dados de preço: $PRICE_DATA"
          
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          MESSAGE="TESTE - Monitoramento SP → Recife\n\nExecutado em: $(date '+%H:%M - %d/%m/%Y')\nVia GitHub Actions\nEnvironment: TELEGRAM\n\nPreço atual: R$ $PRICE_VALUE ($PRICE_RATING)\nMelhor origem: $ORIGIN\nCompanhia: $AIRLINE\n\nEste é um teste do sistema de notificações."
          
        else
          echo "Análise de preços não disponível"
          MESSAGE="TESTE - Workflow Executado\n\nAnálise de preços não disponível\nExecutado em: $(date '+%H:%M - %d/%m/%Y')\nVia GitHub Actions\nEnvironment: TELEGRAM\n\nSistema funcionando, mas sem dados de APIs."
        fi
        
        echo "Enviando notificação..."
        
        RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
          -H "Content-Type: application/json" \
          -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\"}")
        
        echo "Response: $RESPONSE"
        
        if echo "$RESPONSE" | grep -q '"ok":true'; then
          echo "Notificação Telegram enviada com sucesso!"
        else
          echo "Erro no envio da notificação"
        fi
        
    - name: "Save data and commit changes"
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        mkdir -p data/price_history
        
        cd app
        DATE=$(date +%Y-%m-%d_%H)
        if [ -f "flight_analysis.json" ]; then
          cp flight_analysis.json "../data/price_history/sp_recife_${DATE}.json"
          echo "Histórico salvo: sp_recife_${DATE}.json"
        fi
        
        cd ..
        git add data/ || true
        
        if ! git diff --staged --quiet; then
          git commit -m "Update monitoring data - $(date '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "Dados atualizados no repositório"
        else
          echo "Nenhuma mudança nos dados"
        fi
        
    - name: "Cleanup old data"
      run: |
        find data/price_history/ -name "sp_recife_*.json" -mtime +30 -delete 2>/dev/null || true
        echo "Limpeza de dados antigos concluída"
        
    - name: "Execution summary"
      if: always()
      run: |
        cd app
        
        echo "## Resumo da Execução" >> $GITHUB_STEP_SUMMARY
        echo "- Horário: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- Rota: São Paulo → Recife" >> $GITHUB_STEP_SUMMARY
        
        PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
        if [ "$PRICE_DATA" != "ERROR|ERROR|ERROR|ERROR" ]; then
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          echo "- Preço mais barato: R$ $PRICE_VALUE ($PRICE_RATING)" >> $GITHUB_STEP_SUMMARY
          echo "- Melhor opção: $AIRLINE via $ORIGIN" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Dados de preços: Não disponíveis" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### APIs Consultadas:" >> $GITHUB_STEP_SUMMARY
        echo "- Amadeus Self-Service (preços)" >> $GITHUB_STEP_SUMMARY
        echo "- OpenSky Network (tráfego aéreo)" >> $GITHUB_STEP_SUMMARY
        echo "- RSS Feeds (promoções)" >> $GITHUB_STEP_SUMMARY