name: "Promo Monitor - SP ‚Üí Recife"

on:
  schedule:
    - cron: '0 11,17,23 * * 1-5'
  workflow_dispatch:
    inputs:
      departure_date:
        description: 'Data de partida (YYYY-MM-DD)'
        required: false
        default: ''
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  issues: write

jobs:
  check-prices:
    runs-on: ubuntu-latest
    environment: APIKEYS
    outputs:
      price_info: ${{ steps.price_check.outputs.price_info }}
      analysis_data: ${{ steps.upload_analysis.outputs.analysis_data }}
    
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "Install dependencies"
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: "Check SP ‚Üí Recife prices"
      id: price_check
      env:
        AMADEUS_API_KEY: ${{ secrets.AMADEUS_API_KEY }}
        AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
        OPENSKY_CLIENT_ID: ${{ secrets.OPENSKY_CLIENT_ID }}
        OPENSKY_CLIENT_SECRET: ${{ secrets.OPENSKY_CLIENT_SECRET }}
      run: |
        cd app
        echo "üîç Iniciando an√°lise de pre√ßos SP ‚Üí Recife..."
        echo "üìä Verificando credenciais das APIs..."
        
        # Verificar credenciais
        echo "AMADEUS_API_KEY: ${AMADEUS_API_KEY:+presente}"
        echo "AMADEUS_API_SECRET: ${AMADEUS_API_SECRET:+presente}"
        echo "OPENSKY_CLIENT_ID: ${OPENSKY_CLIENT_ID:+presente}"
        echo "OPENSKY_CLIENT_SECRET: ${OPENSKY_CLIENT_SECRET:+presente}"
        
        # Executar an√°lise com logs detalhados
        echo "üöÄ Executando flight_price_apis.py..."
        python flight_price_apis.py
        
        echo "üìã Arquivos criados no diret√≥rio:"
        ls -la
        
        echo "üìÑ Conte√∫do dos logs:"
        if [ -f "price_analysis.log" ]; then
          cat price_analysis.log
        else
          echo "‚ö†Ô∏è Arquivo price_analysis.log n√£o encontrado"
        fi
        
        if [ -f "flight_analysis.json" ]; then
          echo "‚úÖ flight_analysis.json encontrado!"
          echo "üìä Tamanho do arquivo: $(wc -c < flight_analysis.json) bytes"
          echo "üîç Primeiras linhas do JSON:"
          head -10 flight_analysis.json
          
          PRICE_INFO=$(python -c "import json; data=json.load(open('flight_analysis.json')); s=data['summary']; print(f\"{s['cheapest_price_brl']}|{s['price_rating']}|{s['airline']}|{s['best_origin']}\")" 2>/dev/null || echo "ERROR|ERROR|ERROR|ERROR")
          echo "price_info=$PRICE_INFO" >> $GITHUB_OUTPUT
          echo "‚úÖ An√°lise de pre√ßos conclu√≠da: $PRICE_INFO"
        else
          echo "‚ùå flight_analysis.json N√ÉO foi criado!"
          echo "üîç Verificando se o script Python executou corretamente..."
          python -c "print('Python est√° funcionando')"
          echo "price_info=ERROR|ERROR|ERROR|ERROR" >> $GITHUB_OUTPUT
        fi
        
    - name: "Upload analysis data"
      id: upload_analysis
      run: |
        cd app
        if [ -f "flight_analysis.json" ]; then
          echo "analysis_data=$(cat flight_analysis.json | base64 -w 0)" >> $GITHUB_OUTPUT
          echo "Dados de an√°lise preparados"
        else
          echo "analysis_data=" >> $GITHUB_OUTPUT
        fi

  monitor-rss-and-notify:
    runs-on: ubuntu-latest
    environment: TELEGRAM
    needs: check-prices
    
    steps:
    - name: "Checkout repository"
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: "Install dependencies"
      run: |
        cd app
        pip install -r requirements.txt
        
    - name: "Restore price analysis"
      run: |
        cd app
        if [ -n "${{ needs.check-prices.outputs.analysis_data }}" ]; then
          echo "${{ needs.check-prices.outputs.analysis_data }}" | base64 -d > flight_analysis.json
          echo "Dados de an√°lise de pre√ßos restaurados"
        else
          echo "Nenhum dado de an√°lise de pre√ßos dispon√≠vel"
        fi
        
    - name: "Monitor RSS feeds"
      id: monitor
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        echo "Monitorando feeds RSS..."
        python main.py > rss_monitor.log 2>&1
        echo "Monitoramento RSS conclu√≠do"
        
    - name: "Send Telegram notification"
      if: success()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        cd app
        
        echo "Verificando dados para notifica√ß√£o..."
        
        if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
          echo "Credenciais Telegram n√£o configuradas"
          exit 0
        fi
        
        echo "Credenciais Telegram encontradas"
        
        if [ -f "flight_analysis.json" ]; then
          echo "Arquivo de an√°lise encontrado"
          PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
          echo "Dados de pre√ßo: $PRICE_DATA"
          
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          MESSAGE="üéØ Monitoramento SP ‚Üí Recife\n\nüí∞ Pre√ßo atual: R$ $PRICE_VALUE ($PRICE_RATING)\n‚úàÔ∏è Melhor origem: $ORIGIN\nüè¢ Companhia: $AIRLINE\n\n‚è∞ Atualizado: $(date '+%H:%M - %d/%m/%Y')\nü§ñ Via GitHub Actions"
          
        else
          echo "An√°lise de pre√ßos n√£o dispon√≠vel"
          MESSAGE="TESTE - Workflow Executado\n\nAn√°lise de pre√ßos n√£o dispon√≠vel\nExecutado em: $(date '+%H:%M - %d/%m/%Y')\nVia GitHub Actions\nEnvironment: TELEGRAM\n\nSistema funcionando, mas sem dados de APIs."
        fi
        
        # S√≥ enviar notifica√ß√£o se tiver dados de pre√ßos OU posts RSS novos
        SHOULD_NOTIFY=false
        
        if [ -f "flight_analysis.json" ]; then
          SHOULD_NOTIFY=true
          echo "‚úÖ Notifica√ß√£o autorizada: dados de pre√ßos dispon√≠veis"
        elif [ -f "../data/seen.json" ]; then
          # Verificar se seen.json foi atualizado recentemente (√∫ltimos 10 minutos)
          if [ $(find ../data/seen.json -mmin -10 2>/dev/null | wc -l) -gt 0 ]; then
            SHOULD_NOTIFY=true
            echo "‚úÖ Notifica√ß√£o autorizada: novos posts RSS detectados"
          fi
        fi
        
        if [ "$SHOULD_NOTIFY" = "true" ]; then
          echo "üöÄ Enviando notifica√ß√£o..."
          
          RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\":\"$TELEGRAM_CHAT_ID\",\"text\":\"$MESSAGE\"}")
          
          echo "üì° Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"ok":true'; then
            echo "‚úÖ Notifica√ß√£o Telegram enviada com sucesso!"
          else
            echo "‚ùå Erro no envio da notifica√ß√£o"
          fi
        else
          echo "‚ÑπÔ∏è Notifica√ß√£o n√£o enviada: sem dados novos para reportar"
        fi
        
    - name: "Save data and commit changes"
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        mkdir -p data/price_history
        
        cd app
        DATE=$(date +%Y-%m-%d_%H)
        if [ -f "flight_analysis.json" ]; then
          cp flight_analysis.json "../data/price_history/sp_recife_${DATE}.json"
          echo "Hist√≥rico salvo: sp_recife_${DATE}.json"
        fi
        
        cd ..
        git add data/ || true
        
        if ! git diff --staged --quiet; then
          git commit -m "Update monitoring data - $(date '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "Dados atualizados no reposit√≥rio"
        else
          echo "Nenhuma mudan√ßa nos dados"
        fi
        
    - name: "Cleanup old data"
      run: |
        find data/price_history/ -name "sp_recife_*.json" -mtime +30 -delete 2>/dev/null || true
        echo "Limpeza de dados antigos conclu√≠da"
        
    - name: "Execution summary"
      if: always()
      run: |
        cd app
        
        echo "## Resumo da Execu√ß√£o" >> $GITHUB_STEP_SUMMARY
        echo "- Hor√°rio: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- Rota: S√£o Paulo ‚Üí Recife" >> $GITHUB_STEP_SUMMARY
        
        PRICE_DATA="${{ needs.check-prices.outputs.price_info }}"
        if [ "$PRICE_DATA" != "ERROR|ERROR|ERROR|ERROR" ]; then
          PRICE_VALUE=$(echo $PRICE_DATA | cut -d'|' -f1)
          PRICE_RATING=$(echo $PRICE_DATA | cut -d'|' -f2)
          AIRLINE=$(echo $PRICE_DATA | cut -d'|' -f3)
          ORIGIN=$(echo $PRICE_DATA | cut -d'|' -f4)
          
          echo "- Pre√ßo mais barato: R$ $PRICE_VALUE ($PRICE_RATING)" >> $GITHUB_STEP_SUMMARY
          echo "- Melhor op√ß√£o: $AIRLINE via $ORIGIN" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Dados de pre√ßos: N√£o dispon√≠veis" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### APIs Consultadas:" >> $GITHUB_STEP_SUMMARY
        echo "- Amadeus Self-Service (pre√ßos)" >> $GITHUB_STEP_SUMMARY
        echo "- OpenSky Network (tr√°fego a√©reo)" >> $GITHUB_STEP_SUMMARY
        echo "- RSS Feeds (promo√ß√µes)" >> $GITHUB_STEP_SUMMARY